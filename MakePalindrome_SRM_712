package com.topcoder;


import java.util.*;
import java.util.function.BiFunction;

public class MakePalindrome_SRM_712 {
    public static void main(String[] args) {
   String [] result = new MakePalindrome_SRM_712().constructMinimal("artrghfyg");
        Arrays.stream(result).forEach(System.out::println);
    }

    String[] constructMinimal(String card)
    {
        if(card==null||card.length()==0)
             throw new IllegalArgumentException("Invalid input. Cannot be null or empty");
        List<String> result = new ArrayList<>();
        if(isPalindrome(card))
        {
            result.add(card);
            return result.toArray(new String[result.size()]);
        }

        BiFunction<String,String,String> construct = (src, append)->
        {
            if(src==null||src.length()==0 && append==null||append.length()==0)
                return null;
            int mid=src.length()/2;
            if(src.length()%2==0)
                return src.substring(0,mid)+append+src.substring(mid);
            else
            {
                int appendMid = append.length()/2;
                if(append.length()%2==0)
                    return src.substring(0,mid)+append.substring(0,appendMid)+src.substring(mid,mid+1)+append.substring(appendMid)+src.substring(mid+1);
                else
                    {
                        result.add(append);
                        return src;
                    }

            }


        };
        int [] array = new int[26];
        for (char c: card.toCharArray())
            array[c-'a']++;

        List<Node> list = new LinkedList<>();
        for (int i = 0; i <array.length ; i++)
            if(array[i]!=0)
                list.add(new Node((char)('a'+i),array[i]));
        //sort the list
        Collections.sort(list, (Node o1, Node o2)->
        {
            if(o1.getCount()<o2.getCount())
                return 1;
            else  if(o2.getCount()<o1.getCount())
                return -1;
            else
                return 0;
        }) ;


        int i=0;int j=i+1;Node temp1=null; Node temp2 = null;
        StringBuilder builder = new StringBuilder();
        temp1=list.get(i);
        builder.append(create(temp1.getCh(),temp1.getCount()));
        while (j<list.size())
        {
            temp2=list.get(j);
            builder.replace(0,builder.length(),construct.apply(builder.toString(),create(temp2.getCh(),temp2.getCount())));
            j++;
        }
        result.add(builder.toString());

        return result.toArray(new String[result.size()]);


    }
    class Node
    {
        public Node(char ch, int count) {
            this.ch = ch;
            this.count = count;
        }

        char ch;
        int count;

        public char getCh() {
            return ch;
        }
        public int getCount() {
            return count;
        }

    }

    public String create (char c, int times)
    {
        StringBuilder build = new StringBuilder();
        for (int i = 0; i <times ; i++)
              build.append(c);

        return build.toString();

    }

    public boolean isPalindrome(String str)
    {
        if(str.length()==1)
            return true;
        for (int i = 0,j=str.length()-1; i <str.length() ; i++,j--) {
            if(str.charAt(i)!=str.charAt(j))
                return false;

        }
        return true;
    }


}
